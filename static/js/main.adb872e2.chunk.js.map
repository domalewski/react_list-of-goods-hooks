{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","resetButton","recordedGoods","goods","visibleGoods","sort","good1","good2","LENGTH","length","ALPHABET","localeCompare","reverse","getReorderedGoods","handleSort","sortingType","className","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAcF,IAAaP,EAASM,MAAQF,EAC5CM,EA5BD,SACLC,EADK,GAGJ,IADCJ,EACF,EADEA,SAAUH,EACZ,EADYA,WAENQ,EAAY,YAAOD,GAiBzB,OAfAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQR,GACN,KAAKP,EAASgB,OACZ,OAAOF,EAAMG,OAASF,EAAME,OAC9B,KAAKjB,EAASkB,SACZ,OAAOJ,EAAMK,cAAcJ,GAC7B,QACE,OAAO,MAITX,GACFQ,EAAaQ,UAGRR,EAOeS,CAAkBpB,EAAiB,CACvDM,WACAH,eAGIkB,EAAa,SAACC,GAClBf,EAAYe,IAYd,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMJ,EAAWtB,EAASkB,WACnCM,UAAWG,IAAG,iBAAkB,CAC9B,WAAYpB,IAAaP,EAASkB,WAJtC,iCAUA,wBACEO,KAAK,SACLC,QAAS,kBAAMJ,EAAWtB,EAASgB,SACnCQ,UAAWG,IAAG,oBAAqB,CACjC,WAAYpB,IAAaP,EAASgB,SAJtC,4BAUA,wBACES,KAAK,SACLD,UAAWG,IAAG,oBAAqB,CACjC,YAAavB,IAEfsB,QArCW,WACjBrB,GAAeD,IA+BX,qBAUCK,GACC,wBACEgB,KAAK,SACLC,QAzCO,WACflB,EAAYR,EAASM,MACrBD,GAAc,IAwCNmB,UAAU,4BAHZ,sBAUJ,6BACGd,EAAckB,KAAI,SAACC,GAAD,OACjB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCtHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.adb872e2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType;\n  isReversed: boolean;\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n      case SortType.ALPHABET:\n        return good1.localeCompare(good2);\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const resetButton = sortType !== SortType.NONE || isReversed;\n  const recordedGoods = getReorderedGoods(goodsFromServer, {\n    sortType,\n    isReversed,\n  });\n\n  const handleSort = (sortingType: SortType) => {\n    setSortType(sortingType);\n  };\n\n  const setReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const setReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => handleSort(SortType.ALPHABET)}\n          className={cn('button is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => handleSort(SortType.LENGTH)}\n          className={cn('button is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={setReverse}\n        >\n          Reverse\n        </button>\n\n        {resetButton && (\n          <button\n            type=\"button\"\n            onClick={setReset}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {recordedGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}